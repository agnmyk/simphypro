1. Introduction

make_profile is a Python program designed to compare proteins and count their similarity basing on the number of taxons shared by the homologous proteins found for them by the psiblast program (http://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download). 
The main program is accompanied with the psi_parse module which searches psiblast results for the protein gi_numbers and looks for the taxons in which they can be found. The additional get_names_and¬_taxidlist program have to be used when psiblast results are not obtained in one psi_parse pass. 
Input data are in the fasta format. The results are written as a text file containing all pairs of input protein names for which a non zero similarity was counted together with the obtained coefficient value.
	
2. Installation procedure and requirements

All programs are written in Python (make_profile  uses the bitarray module). They do not need any installation procedure and are run as a console application (the detailed list of option is given in section 2).

The gi_taxid_prot.dmp file containing protein gi numbers to taxid assignments is necessary and either the results of the psiblast program or the program itself together with appropriate databases are required. All these data can be obtained from NCBI webpage. 

Because of the size of the gi_taxid_prot.dmp, psi_parse requires a 64-bit computing environment and minimum of 6GB of RAM. make_profile requirements depend on the number of proteins processed and for not very large data it might be run also on machine with 32-bit operating systems. Windows and Unix (Ubuntu, Suse) usage was tested. 

It should be taken into account that the overall program time and memory requirements highly depend on the size and kind of data (proteins) processed. One psiblast file can be obtained in less than minute to more than one day on one PC with Intel i7 processor and its size can exceed 200MB. External memory requirements can be dramatically lowered by choosing an option allowing for removing a psiblast file just after it has been processed.

2. Using make_profile

Before running make_profile.py, the psi_parse.py program and (in some situations which are described below) the get_names_and_taxidlist.py  program must be performed.

2.1 psi_parse 

Program psi_parse for every protein produces a list of taxon ids which are relevant for the homologous proteins found by psiblast. A psiblast result is taken into account if the length of the alignment is not less than 0.8 of the longer protein length and is no longer than 1.2 of the shorter one.

The program can be used in two modes. In the first one for every fasta file the psiblast program is run, in the second the already existing psiblast files placed in the same folder as fasta files are processed. 

2.1.1  input data: 
	a) folder with fasta files. File names should either end with digits or have “fasta” extension,  
	b) file with assignments of protein gi numbers to taxon ids 		
	    (ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/gi_taxid_prot.dmp.gz),
 	c) either: the psiblast program installed with all the required databases,
      	   or:  psiblast files for all the fasta files in the XML format  placed in the same folder (names of the corresponding files should be the same, psiblast files should have the "psiblast" extension)

2.1.2 output data:
	a)  for every fasta file a text file with the extension "taxid" is produced. It contains a list of all taxon identification numbers)
	b) 	optionally files names and taxidlist are produced. The first file contains a list of all input protein names obtained from fasta files. The second file contain a list of all taxons found for the selected psiblast results (only unique names are given). 

2.1.3 usage

psi_parse.py [options] fasta_dir

options:
	-d, --database=path 	path pointing to protein database
	-g, --gi2taxid_file=filename	name of gi_to_taxid file (including path)
	-p, --psiblast=boolean:	controls whether the psiblast will be launched. If the psiblast files are already prepared it should be set to False (default is True)
	-i, --pnum_of_psiblast_iteations=int    number of psiblast iterations (default set to 3)
	-o, --output	if present files names and taxidlist will be produced
	-l, --psiblast_path	if the global path for the psiblast in the system is not set, please specify it in this option


2.1.4. remarks

If psi_parse was performed without --output option or if it was done for more than one set of files, all the taxid files shoud be put in one folder and the get_names_and_taxidlist.py program has to be run. Otherwise, the make_profile program can be performed without this intermediate step.


2.2 get_names_and_taxidlist.py

Program searches a given folder for all fasta and taxid files and produces a file with all protein names and a second one with all taxon ids.

2.21. input 
	folder with fasta and taxid files
2.2.2. output 
	a) names file with protein names (one per line) from all fasta files
	b) taxidlist file containing a list of unique taxon identification numbers from all taxid files 
2.2.3 usage
	get_names_and_taxidlist.py input_dir

2.3 make_profile.py

Program make_profile for every pair of proteins from the names file compares the appropriate taxid files. If the number of taxon ids in both files are not comparable the similarity coefficient is set to zero. Comparability is defined here as A/B  > taxcount_limit where A is the length of the shorter list and B is the length of the longer list and taxcount_limit deafault value is 0.6. If this condition holds, the similarity coefficient is counted as       C2 /A*B where C is the number of common taxids.
2.3.1 input
	a) folder with taxid files, 
	b) names and taxidlist files
2.3.2 output
 text file results. Each line contains names of two proteins and similarity coefficient values 
2.3.3 usage
	
make_profile.py [options] fasta_dir   

options:
	-t, --taxcount_limit=float from [0;1]	similarity coefficients are counted only if a proportion of taxons list lengths is between taxcount_limit and 2-taxcount_limit




